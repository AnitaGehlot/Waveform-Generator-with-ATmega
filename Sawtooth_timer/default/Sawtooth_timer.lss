
Sawtooth_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009d  00000000  00000000  00000131  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000050  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000095  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008f  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	unsigned char i,j;
	unsigned int k;
	DDRB=0xff; //PORTB as OUTPUT
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB=0x00;
  70:	18 ba       	out	0x18, r1	; 24
  72:	11 c0       	rjmp	.+34     	; 0x96 <main+0x2a>
		{
			for(k=0;k<255;k++)
			{
				for(i=0;i<100;i++)
				{
					if(i<j) sbi(PORTB,PB0);
  74:	23 17       	cp	r18, r19
  76:	10 f4       	brcc	.+4      	; 0x7c <main+0x10>
  78:	c0 9a       	sbi	0x18, 0	; 24
  7a:	01 c0       	rjmp	.+2      	; 0x7e <main+0x12>
					else cbi(PORTB,PB0);
  7c:	c0 98       	cbi	0x18, 0	; 24
	{
		for(j=0;j<100;j++)
		{
			for(k=0;k<255;k++)
			{
				for(i=0;i<100;i++)
  7e:	2f 5f       	subi	r18, 0xFF	; 255
  80:	24 36       	cpi	r18, 0x64	; 100
  82:	c1 f7       	brne	.-16     	; 0x74 <main+0x8>

	while(1==1) //Infinite loop
	{
		for(j=0;j<100;j++)
		{
			for(k=0;k<255;k++)
  84:	01 96       	adiw	r24, 0x01	; 1
  86:	8f 3f       	cpi	r24, 0xFF	; 255
  88:	91 05       	cpc	r25, r1
  8a:	11 f0       	breq	.+4      	; 0x90 <main+0x24>
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	f2 cf       	rjmp	.-28     	; 0x74 <main+0x8>
	DDRB=0xff; //PORTB as OUTPUT
	PORTB=0x00;

	while(1==1) //Infinite loop
	{
		for(j=0;j<100;j++)
  90:	3f 5f       	subi	r19, 0xFF	; 255
  92:	34 36       	cpi	r19, 0x64	; 100
  94:	08 f0       	brcs	.+2      	; 0x98 <main+0x2c>
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	f7 cf       	rjmp	.-18     	; 0x8c <main+0x20>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
